<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="create.dao.hrm.AttendanceGroupclassRefMapper" >
  <resultMap id="BaseResultMap" type="create.model.hrm.AttendanceGroupclassRef" >
    <id column="groupClassId" property="groupclassid" jdbcType="INTEGER" />
    <result column="groupId" property="groupid" jdbcType="INTEGER" />
    <result column="classId" property="classid" jdbcType="INTEGER" />
    <result column="yl1" property="yl1" jdbcType="VARCHAR" />
    <result column="yl2" property="yl2" jdbcType="VARCHAR" />
    <result column="yl3" property="yl3" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    groupClassId, groupId, classId, yl1, yl2, yl3
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from attendancegroup_class_ref
    where groupClassId = #{groupclassid,jdbcType=INTEGER}
  </select>
   <select id="serachAttendanceGroupclassRefByProperty" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from attendancegroup_class_ref
   <where>
   	  <if test="groupid != null" >
        and groupId = #{groupid,jdbcType=INTEGER}
      </if>
      <if test="classid != null" >
        and classId = #{classid,jdbcType=INTEGER}
      </if>
   </where>
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from attendancegroup_class_ref
    where groupClassId = #{groupclassid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="create.model.hrm.AttendanceGroupclassRef" >
    insert into attendancegroup_class_ref (groupClassId, groupId, classId, 
      yl1, yl2, yl3)
    values (#{groupclassid,jdbcType=INTEGER}, #{groupid,jdbcType=INTEGER}, #{classid,jdbcType=INTEGER}, 
      #{yl1,jdbcType=VARCHAR}, #{yl2,jdbcType=VARCHAR}, #{yl3,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="create.model.hrm.AttendanceGroupclassRef" >
    insert into attendancegroup_class_ref
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="groupclassid != null" >
        groupClassId,
      </if>
      <if test="groupid != null" >
        groupId,
      </if>
      <if test="classid != null" >
        classId,
      </if>
      <if test="yl1 != null" >
        yl1,
      </if>
      <if test="yl2 != null" >
        yl2,
      </if>
      <if test="yl3 != null" >
        yl3,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="groupclassid != null" >
        #{groupclassid,jdbcType=INTEGER},
      </if>
      <if test="groupid != null" >
        #{groupid,jdbcType=INTEGER},
      </if>
      <if test="classid != null" >
        #{classid,jdbcType=INTEGER},
      </if>
      <if test="yl1 != null" >
        #{yl1,jdbcType=VARCHAR},
      </if>
      <if test="yl2 != null" >
        #{yl2,jdbcType=VARCHAR},
      </if>
      <if test="yl3 != null" >
        #{yl3,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="create.model.hrm.AttendanceGroupclassRef" >
    update attendancegroup_class_ref
    <set >
      <if test="groupid != null" >
        groupId = #{groupid,jdbcType=INTEGER},
      </if>
      <if test="classid != null" >
        classId = #{classid,jdbcType=INTEGER},
      </if>
      <if test="yl1 != null" >
        yl1 = #{yl1,jdbcType=VARCHAR},
      </if>
      <if test="yl2 != null" >
        yl2 = #{yl2,jdbcType=VARCHAR},
      </if>
      <if test="yl3 != null" >
        yl3 = #{yl3,jdbcType=VARCHAR},
      </if>
    </set>
    where groupClassId = #{groupclassid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="create.model.hrm.AttendanceGroupclassRef" >
    update attendancegroup_class_ref
    set groupId = #{groupid,jdbcType=INTEGER},
      classId = #{classid,jdbcType=INTEGER},
      yl1 = #{yl1,jdbcType=VARCHAR},
      yl2 = #{yl2,jdbcType=VARCHAR},
      yl3 = #{yl3,jdbcType=VARCHAR}
    where groupClassId = #{groupclassid,jdbcType=INTEGER}
  </update>
</mapper>